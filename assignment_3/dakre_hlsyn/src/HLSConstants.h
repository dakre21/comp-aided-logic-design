// Netlist constants
const char* NET_ADD      = "+";
const char* NET_SUB      = "-";
const char* NET_MUL      = "*";
const char* NET_DIV      = "/";
const char* NET_MOD      = "%";
const char* NET_COMP_LT  = "<";
const char* NET_COMP_GT  = ">";
const char* NET_COMP_EQ  = "==";
const char* NET_SHL      = "<<";
const char* NET_SHR      = ">>";
const char* NET_REG      = "=";
const char* NET_INC      = "+ 1";
const char* NET_DEC      = "- 1";
const char* NET_MUX      = "?";
const char* NET_REGISTER = "register";
const char* NET_INT1     = "Int1";
const char* NET_INT2     = "Int2";
const char* NET_INT8     = "Int8";
const char* NET_INT16    = "Int16";
const char* NET_INT32    = "Int32";
const char* NET_INT64    = "Int64";
const char* NET_UINT1    = "UInt1";
const char* NET_UINT2    = "UInt2";
const char* NET_UINT8    = "UInt8";
const char* NET_UINT16   = "UInt16";
const char* NET_UINT32   = "UInt32";
const char* NET_UINT64   = "UInt64";
const char* NET_WIRE     = "wire";
const char* NET_INPUT    = "input";
const char* NET_OUTPUT   = "output";
const char* NET_REGW     = "wire";

// Data path constants
const char* DP_ADD       = "ADD";
const char* DP_SUB       = "SUB";
const char* DP_MUL       = "MUL";
const char* DP_DIV       = "DIV";
const char* DP_MOD       = "MOD";
const char* DP_COMP      = "COMP";
const char* DP_SHL       = "SHL";
const char* DP_SHR       = "SHR";
const char* DP_REG       = "REG";
const char* DP_INC       = "INC";
const char* DP_DEC       = "DEC";
const char* DP_MUX       = "MUX2x1";
const char* DP_SADD      = "SADD";
const char* DP_SSUB      = "SSUB";
const char* DP_SMUL      = "SMUL";
const char* DP_SDIV      = "SDIV";
const char* DP_SMOD      = "SMOD";
const char* DP_SCOMP     = "SCOMP";
const char* DP_SSHL      = "SSHL";
const char* DP_SSHR      = "SSHR";
const char* DP_SREG      = "SREG";
const char* DP_SINC      = "SINC";
const char* DP_SDEC      = "SDEC";
const char* DP_SMUX      = "SMUX2x1";
const char* DP_REGISTER  = "reg";
const char* DP_WIRE      = "wire";
const char* DP_INPUT     = "input";
const char* DP_OUTPUT    = "output";
const char* DP_CLK       = "Clk";
const char* DP_RST       = "Rst";

// Data path constants instances
const char* DP_ADD_INST   = "add_";
const char* DP_SUB_INST   = "sub_";
const char* DP_MUL_INST   = "mul_";
const char* DP_DIV_INST   = "div_";
const char* DP_MOD_INST   = "mod_";
const char* DP_COMP_INST  = "comp_";
const char* DP_SHL_INST   = "shl_";
const char* DP_SHR_INST   = "shr_";
const char* DP_REG_INST   = "reg_";
const char* DP_INC_INST   = "inc_";
const char* DP_DEC_INST   = "dec_";
const char* DP_MUX_INST   = "mux_";
const char* DP_SADD_INST  = "sadd_";
const char* DP_SSUB_INST  = "ssub_";
const char* DP_SMUL_INST  = "smul_";
const char* DP_SDIV_INST  = "sdiv_";
const char* DP_SMOD_INST  = "smod_";
const char* DP_SCOMP_INST = "scomp_";
const char* DP_SSHL_INST  = "sshl_";
const char* DP_SSHR_INST  = "sshr_";
const char* DP_SREG_INST  = "sreg_";
const char* DP_SINC_INST  = "sinc_";
const char* DP_SDEC_INST  = "sdec_";
const char* DP_SMUX_INST  = "smux_";

// Datawidth constants
const char* DATAWIDTH_1       = "";
const char* DATAWIDTH_2       = "[1:0]";
const char* DATAWIDTH_8       = "[7:0]";
const char* DATAWIDTH_16      = "[15:0]";
const char* DATAWIDTH_32      = "[31:0]";
const char* DATAWIDTH_64      = "[63:0]";
const char* DATAWIDTH_1_INST  = "#(1)";
const char* DATAWIDTH_2_INST  = "#(2)";
const char* DATAWIDTH_8_INST  = "#(8)";
const char* DATAWIDTH_16_INST = "#(16)";
const char* DATAWIDTH_32_INST = "#(32)";
const char* DATAWIDTH_64_INST = "#(64)";
const char* DATAWIDTH_1_STR   = "1";
const char* DATAWIDTH_2_STR   = "2";
const char* DATAWIDTH_8_STR   = "8";
const char* DATAWIDTH_16_STR  = "16";
const char* DATAWIDTH_32_STR  = "32";
const char* DATAWIDTH_64_STR  = "64";

// Misc constants
const char* MISC_NULL       = "\0";
const char* MISC_NEW_LINE   = "\n";
const char* MISC_WHITESPACE = " ";
const char* MISC_COMMENT    = "\\";
const char* MISC_LINE_END   = ";\n";
const char* MISC_COMMA      = ",";
const char* MISC_TAB        = "    ";
const char* MISC_EQUALS     = "=";
const char* MISC_SEL        = ":";

const char* EQZ             = "EQZ_";
const char* GTZ             = "GTZ_";
const char* LTZ             = "LTZ_";

const char* STATIC_NULL      = " ";
const char* STATIC_COMMENT   = "\n    // HLS has generated this HDL code with the dpgen executable\n    // Author: David Akre\n\n";
const char* STATIC_REGS      = "    reg Clk, Rst;\n";
const char* STATIC_WIRES     = "    wire LTZ_, GTZ_, EQZ_;\n";
const char* STATIC_ALWAYS    = "    always\n";
const char* STATIC_CLK_START = "        #(10) Clk <= ~Clk;\n\n";
const char* STATIC_ENDMODULE = "\nendmodule\n";
const char* STATIC_MODULE    = "module ";
const char* STATIC_TIMING    = "`timescale 1ns / 1ns\n\n\n";

// Datapath to width constants
const char* DP_WIDTH_1   = "1";
const char* DP_WIDTH_2   = "2";
const char* DP_WIDTH_8   = "8";
const char* DP_WIDTH_16  = "16";
const char* DP_WIDTH_32  = "32";
const char* DP_WIDTH_64  = "64";

// Datapath latency constants
float DP_REG_1          = 2.616;
float DP_REG_2          = 2.644;
float DP_REG_8          = 2.879;
float DP_REG_16         = 3.061;
float DP_REG_32         = 3.602;
float DP_REG_64         = 3.966;
float DP_ADD_1          = 2.704;
float DP_ADD_2          = 3.713;
float DP_ADD_8          = 4.924;
float DP_ADD_16         = 5.638;
float DP_ADD_32         = 7.270;
float DP_ADD_64         = 9.566;
float DP_SUB_1          = 3.024;
float DP_SUB_2          = 3.412;
float DP_SUB_8          = 4.890;
float DP_SUB_16         = 5.569;
float DP_SUB_32         = 7.253;
float DP_SUB_64         = 9.566;
float DP_MUL_1          = 2.438;
float DP_MUL_2          = 3.651;
float DP_MUL_8          = 7.453;
float DP_MUL_16         = 7.811;
float DP_MUL_32         = 12.395;
float DP_MUL_64         = 15.354;
float DP_COMP_1         = 3.031;
float DP_COMP_2         = 3.934;
float DP_COMP_8         = 5.949;
float DP_COMP_16        = 6.256;
float DP_COMP_32        = 7.264;
float DP_COMP_64        = 8.416;
float DP_MUX2x1_1       = 4.083;
float DP_MUX2x1_2       = 4.115;
float DP_MUX2x1_8       = 4.815;
float DP_MUX2x1_16      = 5.623;
float DP_MUX2x1_32      = 8.079;
float DP_MUX2x1_64      = 8.766;
float DP_SHR_1          = 3.644;
float DP_SHR_2          = 4.007;
float DP_SHR_8          = 5.178;
float DP_SHR_16         = 6.460;
float DP_SHR_32         = 8.819;
float DP_SHR_64         = 11.095;
float DP_SHL_1          = 3.614;
float DP_SHL_2          = 3.980;
float DP_SHL_8          = 5.152;
float DP_SHL_16         = 6.549;
float DP_SHL_32         = 8.565;
float DP_SHL_64         = 11.220;
float DP_DIV_1          = 0.619;
float DP_DIV_2          = 2.144;
float DP_DIV_8          = 15.439;
float DP_DIV_16         = 33.093;
float DP_DIV_32         = 86.312;
float DP_DIV_64         = 243.233;
float DP_MOD_1          = 0.758;
float DP_MOD_2          = 2.149;
float DP_MOD_8          = 16.078;
float DP_MOD_16         = 35.563;
float DP_MOD_32         = 88.142;
float DP_MOD_64         = 250.583;
float DP_INC_1          = 1.792;
float DP_INC_2          = 2.218;
float DP_INC_8          = 3.111;
float DP_INC_16         = 3.471;
float DP_INC_32         = 4.347;
float DP_INC_64         = 6.200;
float DP_DEC_1          = 1.792;
float DP_DEC_2          = 2.218;
float DP_DEC_8          = 3.108;
float DP_DEC_16         = 3.701;
float DP_DEC_32         = 4.685;
float DP_DEC_64         = 6.503;
